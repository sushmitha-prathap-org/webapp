name: Build AMI Workflow

on:
  push:
    branches: ["main"]

env:
  PRODUCT_VERSION: "1.9.4" # or: "latest"
  stack: "demo"

jobs:
  ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install zip
        run: sudo apt-get -y install zip

      - name: Create a zip archive
        run: |
          zip -r ./webapp.zip ./app/
          ls

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: env.stack == 'dev'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: env.stack == 'demo'
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Packer Init
        run: |
          pwd
          ls
          packer init ./app/packer/aws-us-east-1.pkr.hcl

      - name: Build AMI
        id: packer
        run: |
          ami_id=$(packer build ./app/packer/aws-us-east-1.pkr.hcl | grep -oP '(?<=ami-)[a-f0-9]+')
          echo "Packer generated AMI ID: $ami_id"
          echo "::set-output name=ami_id::$ami_id"

      - name: Get Latest Launch Template ID
        id: latest-launch-template-id
        run: |
          # Use AWS CLI to get the latest launch template ID
          latest_launch_template_id=$(aws ec2 describe-launch-templates \
            --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' \
            --output text)

          echo "Latest Launch Template ID: $latest_launch_template_id"
          echo "::set-output name=launch_template_id::$latest_launch_template_id"

      - name: Create Launch Template Version
        id: launch_template_version
        run: |
          launch_template_id="${{ steps.latest-launch-template-id.outputs.launch_template_id }}"
          ami_id="${{ steps.packer.outputs.ami_id }}"
          launch_template_version_id=$(aws ec2 create-launch-template-version \
            --launch-template-id "$launch_template_id" \
            --version-description WebVersion2 \
            --source-version 1 \
            --launch-template-data "ImageId=$ami_id")
            echo "Launch Template Version ID: $launch_template_version_id"
            echo "::set-output name=launch_template_version_id::$launch_template_version_id"

      - name: Update Auto Scaling Group
        run: |
          launch_template_versionId="${{ steps.launch_template_version.outputs.launch_template_version_id }}"
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name autoScaleGroup \
          --launch-template "LaunchTemplateId=$launch_template_versionId,Version=latest"

      - name: Refresh Instances in Auto Scaling Group
        id: refresh_instance
        run: |
          refresh_instance_id=$(aws autoscaling start-instance-refresh --auto-scaling-group-name "autoScaleGroup" --output json)
          echo "refresh instance ID: $refresh_instance_id"
          echo "::set-output name=refresh_instance_id::$(echo $refresh_instance_id" | jq -r '.InstanceRefreshId')"

      - name: Wait for Instance Refresh Completion
        run: |
          refresh_id=${{ steps.refresh_instance.outputs.refresh_instance_id }}
          status="pending"
          while [[ "$status" == "pending" || "$status" == "in-progress" ]]; do
           sleep 60  # Wait for 60 seconds before checking the status again
           status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "autoScaleGroup" --instance-refresh-ids $refresh_id --output json | jq -r '.InstanceRefreshes[0].Status')
           echo "Current status: $status"
          done

          if [[ "$status" != "successful" ]]; then
           echo "Instance refresh failed"
           exit 1
          fi
