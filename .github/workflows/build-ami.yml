name: Build AMI Workflow

on:
  push:
    branches: ["main"]

env:
  PRODUCT_VERSION: "1.9.4" # or: "latest"
  stack: "demo"

jobs:
  ami:
    runs-on: ubuntu-latest
    env:
       stack: "demo"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install zip and jq
        run: |
          sudo apt-get -y install zip
          sudo apt-get install jq

      - name: Create a zip archive
        run: |
          zip -r ./webapp.zip ./app/
          ls

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: env.stack == 'dev'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: env.stack == 'demo'
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Packer Init
        run: |
          pwd
          ls
          packer init ./app/packer/aws-us-east-1.pkr.hcl

      - name: Build AMI
        run: packer build ./app/packer/aws-us-east-1.pkr.hcl

      - name: Get AMI id
        run: |
          ami_id=$(aws ec2 describe-images --owners 903587831963 --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
          echo "Packer generated AMI ID: $ami_id"
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV

      - name: Get Latest Launch Template ID
        id: latest-launch-template-id
        run: |
          latest_launch_template_id=$(aws ec2 describe-launch-templates \
            --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' \
            --output text)

          echo "Latest Launch Template ID: $latest_launch_template_id"
          echo "latest_launch_template_id=$latest_launch_template_id" >> $GITHUB_ENV

      - name: Create Launch Template Version
        id: launch_template_version
        run: |
          launch_template_version_name=$(aws ec2 create-launch-template-version \
            --launch-template-id "$latest_launch_template_id" \
            --version-description WebVersion2 \
            --source-version 1 \
            --launch-template-data "ImageId=$AMI_ID" --query 'LaunchTemplateVersion.LaunchTemplateName' --output text)
            echo "Launch Template Version Name: $launch_template_version_name"
            echo "launch_template_version_name=$launch_template_version_name" >> $GITHUB_ENV

      - name: Retrieve Auto Scaling Group Names
        run: |
          asg_name=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].AutoScalingGroupName' --output text)
          echo "Auto Scaling Group Names: $asg_name"
          echo "asg_name=$asg_name" >> $GITHUB_ENV

      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $asg_name \
          --launch-template '{"LaunchTemplateName":"${{ env.launch_template_version_name }}","Version":"$Latest"}'

      - name: Refresh Instances in Auto Scaling Group
        id: refresh_instance
        run: |
          refresh_instance_id=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $asg_name --output text)
          echo "refresh instance ID: $refresh_instance_id"
          echo "refresh_id=$refresh_instance_id" >> $GITHUB_ENV


      - name: Wait for Instance Refresh Completion
        run: |
          status="pending"
          while [[ "$status" == "pending" || "$status" == "in-progress" ]]; do
           sleep 60 
           status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $asg_name --instance-refresh-ids $refresh_id --output json | jq -r '.InstanceRefreshes[0].Status')
           echo "Current status: $status"
          done

          if [[ "$status" != "successful" ]]; then
           echo "Instance refresh failed"
           exit 1
          fi
